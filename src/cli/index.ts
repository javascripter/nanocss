#!/usr/bin/env node
import { defineCommand, runMain } from 'citty'
import * as fg from 'fast-glob'
import fs from 'node:fs'
import { version } from '../../package.json'
import { extractHooks } from './extract-hooks'
import chokidar from 'chokidar'
import path from 'node:path'

const main = defineCommand({
  meta: {
    name: 'nanocss',
    version,
    description: 'NanoCSS CLI',
  },
  args: {
    input: {
      type: 'string',
      description:
        'Input files or globs to extract hooks from (e.g. src/**/*.tsx)',
      required: true,
      alias: 'i',
    },
    output: {
      type: 'string',
      description:
        'Output file to write the NanoCSS script to (e.g. src/lib/nanocss.ts)',
      required: true,
      alias: 'o',
    },
    watch: {
      type: 'boolean',
      description: 'Watch mode to update the output file on changes',
      alias: 'w',
    },
  },
  async run({ args }) {
    let { input, output } = args as {
      input: string | string[]
      output: string | string[]
    }

    if (typeof output !== 'string') {
      throw new Error(
        `Expected output to be a string, but got: ${typeof args.output}`
      )
    }

    if (typeof input === 'string') {
      input = [input]
    }

    input.push(
      // Ignore .d.ts by default because these can't contain hooks
      '!**/*.d.ts'
    )

    const files = await fg.glob(input, {
      ignore: output ? [args.output] : [],
      onlyFiles: true,
      absolute: true,
      cwd: process.cwd(),
    })

    if (files.length === 0) {
      throw new Error(`No files found in: ${args.input}`)
    }

    console.log('Generating NanoCSS script...')

    const hooks = new Map<string, string[]>()

    for (const file of files) {
      const contents = fs.readFileSync(file, 'utf-8')

      hooks.set(file, await extractHooks(file, contents))
    }

    const script = getNanoCssScript({
      hooks: [...hooks.values()].flat(),
    })

    fs.writeFileSync(args.output, script)

    console.log('NanoCSS script generated successfully!')

    // Watch mode
    if (args.watch) {
      console.log('Watching for changes...')
      const watcher = chokidar.watch(input, {
        ignored: output,
        ignoreInitial: true,
      })

      watcher.on('all', async (event, relative) => {
        const file = path.resolve(process.cwd(), relative)
        if (event !== 'add' && event !== 'change' && event !== 'unlink') {
          return
        }
        console.log('Updating...')
        if (event === 'add' || event === 'change') {
          const contents = fs.readFileSync(file, 'utf-8')
          try {
            hooks.set(file, await extractHooks(file, contents))
          } catch (error) {
            console.error(`Error extracting hooks in ${file}`)
            console.log('Continuing to watch...')
            return
          }
        } else if (event === 'unlink') {
          hooks.delete(file)
        }

        const script = getNanoCssScript({
          hooks: [...hooks.values()].flat(),
        })
        fs.writeFileSync(output, script)
        console.log('Updated successfully!')
      })

      process.on('SIGINT', () => {
        watcher.close()
        process.exit()
      })
    }
  },
})

function getNanoCssScript({ hooks }: { hooks: string[] }) {
  return `// Generated by NanoCSS CLI (v${version})
import { nanocss } from '@nanocss/nanocss'

export const { props, create, inline, defineVars, createTheme, styleSheet } =
  nanocss({
    hooks: [${hooks.map((hook) => JSON.stringify(hook)).join(', ')}],
    debug: process.env.NODE_ENV !== 'production',
  })
`
}

runMain(main, {})
